import React, { useEffect, useMemo, useState } from 'react'
import api from '../services/api'
import Tabela from '../components/Tabela'
import Modal from '../components/Modal'
import Input from '../components/Input'
import Botao from '../components/Botao'
import { formatarDataISOParaBR, formatarMoedaBRL, anoMesAtual } from '../utils/formatadores'
const categoriasEx=['Alimentação','Transporte','Saúde','Lazer','Educação','Moradia','Outros']
export default function Transacoes(){ const [lista,setLista]=useState([]); const [erro,setErro]=useState(''); const [carregando,setCarregando]=useState(false); const [filtros,setFiltros]=useState({ mes:anoMesAtual(), categoria:'', tipo:''}); const [pagina,setPagina]=useState(1); const [porPagina]=useState(10); const [modalAberto,setModalAberto]=useState(false); const [editando,setEditando]=useState(null); const [form,setForm]=useState({ tipo:'receita', valor:'', categoria:'', data:'', descricao:''}); const [salvando,setSalvando]=useState(false); const colunas=useMemo(()=>[{ titulo:'Data', acesso:'data', render:l=>formatarDataISOParaBR(l.data)},{ titulo:'Tipo', acesso:'tipo'},{ titulo:'Categoria', acesso:'categoria'},{ titulo:'Descrição', acesso:'descricao'},{ titulo:'Valor', acesso:'valor', render:l=>formatarMoedaBRL(l.valor)}],[]); async function carregar(){ try{ setCarregando(true); setErro(''); const { data }=await api.transacoes.listar(filtros); setLista(Array.isArray(data)?data:data?.items||[]);}catch(ex){ setErro(ex?.response?.data?.mensagem || 'Falha ao carregar transações.'); } finally{ setCarregando(false);} } useEffect(()=>{carregar()},[filtros]); function abrirNovo(){ setEditando(null); setForm({ tipo:'receita', valor:'', categoria:'', data:'', descricao:''}); setModalAberto(true);} function abrirEditar(linha){ setEditando(linha); setForm({ tipo:linha.tipo, valor:String(linha.valor), categoria:linha.categoria, data:linha.data?.slice(0,10), descricao:linha.descricao}); setModalAberto(true);} async function salvar(){ try{ setSalvando(true); const payload={ ...form, valor:Number(form.valor)}; editando? await api.transacoes.atualizar(editando.id,payload): await api.transacoes.criar(payload); setModalAberto(false); await carregar(); }catch(ex){ alert(ex?.response?.data?.mensagem || 'Falha ao salvar.'); } finally{ setSalvando(false);} } async function excluir(linha){ if(!confirm('Deseja excluir esta transação?')) return; try{ await api.transacoes.remover(linha.id); await carregar(); }catch(ex){ alert(ex?.response?.data?.mensagem || 'Falha ao excluir.'); } } const inicio=(pagina-1)*porPagina; const paginados=lista.slice(inicio,inicio+porPagina); const totalPaginas=Math.max(1,Math.ceil(lista.length/porPagina)); return <div className="space-y-4"><h1 className="titulo-secao">Transações</h1>{erro && <div className="card p-4 text-sm text-red-600">{erro}</div>}<div className="card p-4"><div className="grid grid-cols-1 md:grid-cols-4 gap-3"><div><label className="block text-sm mb-1">Mês</label><input type="month" className="w-full border rounded px-3 py-2" value={filtros.mes} onChange={e=>setFiltros({ ...filtros, mes:e.target.value })} /></div><div><label className="block text-sm mb-1">Categoria</label><select className="w-full border rounded px-3 py-2" value={filtros.categoria} onChange={e=>setFiltros({ ...filtros, categoria:e.target.value })}><option value="">Todas</option>{categoriasEx.map(c=> <option key={c} value={c}>{c}</option>)}</select></div><div><label className="block text-sm mb-1">Tipo</label><select className="w-full border rounded px-3 py-2" value={filtros.tipo} onChange={e=>setFiltros({ ...filtros, tipo:e.target.value })}><option value="">Todos</option><option value="receita">Receita</option><option value="despesa">Despesa</option></select></div><div className="flex items-end"><Botao onClick={abrirNovo}>Adicionar transação</Botao></div></div></div><div className="card p-4">{carregando ? <div>Carregando...</div> : <Tabela colunas={colunas} dados={paginados} onEditar={abrirEditar} onExcluir={excluir} />}<div className="flex justify-between items-center mt-3 text-sm"><div>Total: {lista.length}</div><div className="space-x-2"><button className="px-3 py-1 border rounded" disabled={pagina<=1} onClick={()=>setPagina(p=>Math.max(1,p-1))}>Anterior</button><span>Página {pagina} de {totalPaginas}</span><button className="px-3 py-1 border rounded" disabled={pagina>=totalPaginas} onClick={()=>setPagina(p=>Math.min(totalPaginas,p+1))}>Próxima</button></div></div></div><Modal aberto={modalAberto} titulo={editando?'Editar transação':'Nova transação'} onFechar={()=>setModalAberto(false)} onConfirmar={salvar} carregando={salvando}><div className="space-y-3"><div><label className="block text-sm mb-1">Tipo</label><select className="w-full border rounded px-3 py-2" value={form.tipo} onChange={e=>setForm({ ...form, tipo:e.target.value })}><option value="receita">Receita</option><option value="despesa">Despesa</option></select></div><Input rotulo="Valor" tipo="number" placeholder="0,00" valor={form.valor} onChange={e=>setForm({ ...form, valor:e.target.value })} /><div><label className="block text-sm mb-1">Categoria</label><select className="w-full border rounded px-3 py-2" value={form.categoria} onChange={e=>setForm({ ...form, categoria:e.target.value })}><option value="">Selecione</option>{categoriasEx.map(c=> <option key={c} value={c}>{c}</option>)}</select></div><Input rotulo="Data" tipo="date" valor={form.data} onChange={e=>setForm({ ...form, data:e.target.value })} /><Input rotulo="Descrição" placeholder="Ex.: mercado" valor={form.descricao} onChange={e=>setForm({ ...form, descricao:e.target.value })} /></div></Modal></div> }
