import React, { useEffect, useState } from 'react'
import api from '../services/api'
import Modal from '../components/Modal'
import Input from '../components/Input'
import Botao from '../components/Botao'
import { formatarMoedaBRL } from '../utils/formatadores'
export default function Metas(){ const [metas,setMetas]=useState([]); const [novaAberta,setNovaAberta]=useState(false); const [form,setForm]=useState({ titulo:'', valor_meta:'', valor_atual:''}); const [salvando,setSalvando]=useState(false); const [erro,setErro]=useState(''); const [carregando,setCarregando]=useState(false); async function carregar(){ try{ setCarregando(true); const { data }=await api.metas.listar(); setMetas(Array.isArray(data)?data:data?.items||[]);}catch(ex){ setErro(ex?.response?.data?.mensagem || 'Falha ao carregar metas.'); } finally{ setCarregando(false);} } useEffect(()=>{carregar()},[]); async function salvar(){ try{ setSalvando(true); const payload={ ...form, valor_meta:Number(form.valor_meta||0), valor_atual:Number(form.valor_atual||0)}; await api.metas.criar(payload); setNovaAberta(false); setForm({ titulo:'', valor_meta:'', valor_atual:''}); await carregar(); }catch(ex){ alert(ex?.response?.data?.mensagem || 'Falha ao criar meta.'); } finally{ setSalvando(false);} } async function atualizarValor(meta,inc){ try{ await api.metas.atualizar(meta.id,{ valor_atual:Number(meta.valor_atual)+inc}); await carregar(); }catch(ex){ alert(ex?.response?.data?.mensagem || 'Falha ao atualizar meta.'); } } async function excluir(meta){ if(!confirm('Deseja excluir esta meta?')) return; try{ await api.metas.remover(meta.id); await carregar(); }catch(ex){ alert(ex?.response?.data?.mensagem || 'Falha ao excluir meta.'); } } return <div className="space-y-4"><div className="flex items-center justify-between"><h1 className="titulo-secao">Metas</h1><Botao onClick={()=>setNovaAberta(true)}>Nova meta</Botao></div>{erro && <div className="card p-4 text-sm text-red-600">{erro}</div>}<div className="grid grid-cols-1 md:grid-cols-2 gap-4">{carregando && <div className="card p-4">Carregando...</div>}{metas.map(m=>{ const progresso=Math.min(100,Math.round((Number(m.valor_atual)/Number(m.valor_meta||1))*100)); const concluida=progresso>=100; return <div key={m.id} className="card p-4"><div className="flex justify-between items-center mb-2"><h3 className="font-semibold">{m.titulo}</h3>{concluida && <span className="text-emerald-700 text-sm">Concluída</span>}</div><div className="text-sm text-gray-600">Meta: {formatarMoedaBRL(m.valor_meta)} • Atual: {formatarMoedaBRL(m.valor_atual)}</div><div className="w-full h-3 bg-gray-100 rounded mt-3"><div className={`h-3 rounded ${concluida?'bg-emerald-600':'bg-blue-500'}`} style={{ width:`${progresso}%`}} /></div><div className="flex gap-2 mt-3"><Botao variante="ghost" onClick={()=>atualizarValor(m,100)}>+ R$100</Botao><Botao variante="ghost" onClick={()=>atualizarValor(m,500)}>+ R$500</Botao><Botao variante="ghost" onClick={()=>excluir(m)} className="text-red-600">Excluir</Botao></div></div> })}</div><Modal aberto={novaAberta} titulo="Nova meta" onFechar={()=>setNovaAberta(false)} onConfirmar={salvar} carregando={salvando}><div className="space-y-3"><Input rotulo="Título" placeholder="Ex.: Viagem" valor={form.titulo} onChange={e=>setForm({ ...form, titulo:e.target.value })} /><Input rotulo="Valor da meta" tipo="number" valor={form.valor_meta} onChange={e=>setForm({ ...form, valor_meta:e.target.value })} /><Input rotulo="Valor atual" tipo="number" valor={form.valor_atual} onChange={e=>setForm({ ...form, valor_atual:e.target.value })} /></div></Modal></div> }
